---

- name: Deploy mezzanine
  hosts: web
  vars:
    user: "{{ ansible_ssh_user}}"
    proj_name: mezzanine-example
    venv_home: "{{ ansible_env.HOME }}"
    venv_path: "{{ venv_home }}/{{ proj_name }}"
    proj_dirname: project
    proj_path: "{{ venv_path }}/{{ proj_dirname }}"
    reqs_path: requirements.txt
    manage: "{{ python }} {{ proj_path }}/manage.py"
    live_hostname: 172.16.34.11.xip.io
    domains:
      - 172.16.34.11.xip.io
      - www.172.16.34.11.xip.io
    repo_url: git@github.com:lorin/mezzanine-example.git
    gunicorn_port: 8000
    locale: en.US.UTF-8
    # Mezzanine 中的Fabric 脚本中并不包含下面的变量y
    # 我在这里定义它们是为了方便起见
    conf_path: /etc/nginx/
    tsl_enabled: True
    python: "{{ venv_path }}/bin/python"
    database_name: "{{ proj_name }}"
    database_user: "{{ proj_name }}"
    database_host: localhost
    database_port: 5432
    gunicorn_proc_name: mezzanine
  vars_files:
    - secrets.yml
  tasks:
    - name: install apt packages
      yum: pkg={{ item }} update_cache=yes
      sudo: Ture 
      with_items:
        - "{{ git }}"
        - "{{ libjpeg-dev }}"
        - "{{ libpq-dev }}"
        - "{{ memcached }}"
        - "{{ nginx }}" 
        - "{{ postgresql }}"
        - "{{ python-dev }}"
        - "{{ python-pip }}"
        - "{{ python-psycopg2 }}"
        - "{{ python-setuptools }}"
        - "{{ python-virtualenv }}"
        - "{{ supervisor }}"

    - name: check out the repository on the host
      git: repo={{ repo_url }} dest={{ proj_path }} accept_hostkey=yes

    - name: install required python packages
      pip: name={{ item }} virtualenv={{ venv_path }}
      with_items:
        - gunicorn
        - setproctitle
        - south
        - psycopg2
        - django-compressor
        - python-memcached

    - name: install requirements.txt
      pip: requirements={{ proj_path }}/{{ reqs_path }} virtualenv={{ venv_path }}

    - name: create a user 
      postgresql_db:
        name: "{{ database_name }}"
        password: "{{ db_pass }}"
      sudo: True
      sudo_user: postgres

    - name: generate the settings file 
      postgresql_db:   
        name: "{{ database_name }}"
        password: "{{ db_pass }}" 
        encoding: UTF8
        lc_ctype: "{{ locale }}" 
        lc_collate: "{{ locale }}"
        template: template0
      sudo: True
      sudo_user: postgres

    - name: generate the settings file
      template:
        src:templates/local_settings.py.j2
        dest:"{{ proj_path }}/local_settings.py"

    - name: sync the database, apply migrations, collect static content
      django_manage:
        command: "{{ item }}"  
        app_path: "{{ proj_path }}"
        virtualenv: "{{ venv_path }}"
      with_items:
       - syncdb
       - migrate
       - collectstatic

    - name: set the site id
      script: scripts/setsite.py
      environment:
        PATH: "{{ venv_path }}/bin"
        PROJECT_DIR: "{{ proj_path }}"
        WEBSITE_DOMAIN: "{{ live_hostname }}"

    - name: set the admin password
      script: scripts/setadmin.py
      environment:
        PATH: "{{ venv_path }}/bin"
        PROJECT_DIR: "{{ proj_path }}"
        ADMIN_PASSWORD: "{{ admin_pass }}"

    - name: set the gunicorn config file
      template:
        src:templates/gunicorn.conf.j2
        dest:"{{ proj_path}}/gunicorn.conf.py"

    - name: set supervisor config file 
      template:
        src:templates/supervisor.conf.j2
        dest:/etc/supervisor/conf.d/mezzanine.conf

    - name: set the nginx config file
      template:
        src:templates/nginx.conf.j2
        dest:/etc/nginx/nginx-mezzanine.conf
      notify: restart nginx
      sudo: Ture

#    - name: enable the nginx config file
#      file:
#        src: /etc/nginx/sites-available/nginx-mezzanine.conf
#        dest: /etc/nginx/sites-enabled/nginx-mezzanine.conf
#      notify: restart nginx
#      sudo: Ture  
#    ubantu使用配置
 
#     - name: remove the default nginx config file
#       file: path=/etc/nginx/sites-enabled/default state=absent
#       notify: restart nginx
#       sudo: Ture
#       ubantu使用配置

    - name: ensure config path exists
      file: path={{ conf_path }} state=directory
      sudo: True
      when: tsl_enabled   
    
    - name: create ssl certificates
      command: >
        openssl req -new -x509 -nodes -out {{ proj_name }}.crt
        -keyout {{ proj_name }}.key -subj '/CN{{ domains[0] }}' -days 3650
        chdir={{ conf_path }}/{{ proj_name}}.crt
      sudo: True
      when: tsl_enabled
      notify: restart nginx

    - name: install poll twitter cron job 
      cron: name="poll twitter" minute"*/5" user={{ user }}
        job="{{ manage }} poll_twitter"

  handlers:
    - name: restart supervisor 
      supervisorctl: name=gunicorn_mezzanine state=restarted
      sudo: True
    
    - name: restart nginx
      service: name=nignx state=restarted
      sudo: True
  









